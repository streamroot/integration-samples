{"version":3,"sources":["../../../../src/EventManagement.js","../../../../src/main.js"],"names":["poller","event","detail","amp","Poller","ondatachange","state","ON","id","EventManagement","i","len","_this","states","length","config","_state","interval","url","createElement","poster","className","transform","bind","Promise","stateChange","STATE_CHANGE","addEventListener","dispatchEvent","this","contains","player","container","removeChild","play","appendChild","akamai","Plugin","registerPlugin"],"mappings":"qRAKSA,IAALC,EAAcC,QAAWC,IAAIC,OACxBJ,EAAOK,QAENC,GAAAA,EAAJC,mBAEA,KAGK,MAFMC,EAAIC,OAEVC,EAAA,EAAAC,EAAAC,EAAAC,OAAAC,OAAAJ,EAAAC,EAAAD,OACGG,EAASH,GAAAF,IAAKK,EAApB,GACSH,EAAOC,iCATpBE,OAAAE,EAAAF,yBAsBKA,IAALE,EAAcA,MACTC,SAALD,EAAAE,UAAA,IACKC,OAAMH,SAAXI,cAAA,SACKF,OAAAA,UAAkBA,qBAElBG,UAAOC,EAAZC,UAAwBC,KAAAX,8DAEnBU,kLAaME,2CAMHC,EAAAA,oBAAAA,EAAyBC,aAAAD,KACnBvB,OADZyB,iBAAAlB,EAAAiB,aAAAD,gOAoBUzB,2FAQRgB,OAAKA,6DAIJY,KAAAA,OAAcpB,aAEXqB,KAAKb,OAAOR,UAApBsB,SAAAD,KAAAT,cACEW,OAAAC,UAAAC,YAAAJ,KAAAT,aAESW,OAAOC,YAAUC,GAAtBJ,KAAkCE,OAAlCG,wFAOEH,OAAKf,UAALmB,YAA4BN,KAAAT,qBAEzBW,sOApG8BK,IAAOjC,IAAIkC,eAAAA,kBAAAA,OAAAA,IAAAA,OAAAA,cAAAA,ICGxDD,EAAOjC,gBAAQmC","file":"akamai/amp/eventmanagement/Eventmanagement.min.js","sourcesContent":["export default class EventManagement extends akamai.amp.Plugin {\n\n  constructor(player, config) {\n    super(player, config)\n\n    this.poller = new akamai.amp.Poller()\n    this.poller.ondatachange = (event) => {\n      const id = (event.detail || \"\").trim()\n      let state = null\n\n      if (id == EventManagement.ON) {\n        state = {id: EventManagement.ON}\n      }\n      else {\n        const states = this.states\n        for (let i = 0, len = this.states.length; i < len; i++) {\n          if (states[i].id == id) {\n            state = states[i]\n            break\n          }\n        }\n      }\n\n      if (state != null) {\n        this.state = state\n      }\n    }\n\n    this.states = config.states || []\n    this._state = {}\n    this.url = config.url\n    this.interval = config.interval || 5\n    this.poster = document.createElement(\"img\")\n    this.poster.className = \"amp-event-poster\"\n\n    this.transform = this.transform.bind(this)\n    player.addTransform(akamai.amp.TransformType.MEDIA, this.transform)\n  }\n\n  static get ON() {\n    return \"on\"\n  }\n\n  static get STATE_CHANGE() {\n    return \"statechange\"\n  }\n\n  transform(media) {\n    return new Promise((resolve, reject) => {\n      if (this.state.id === EventManagement.ON) {\n        resolve(media)\n        return\n      }\n\n      const stateChange = (event) => {\n        if (event.detail.id == EventManagement.ON) {\n          this.removeEventListener(EventManagement.STATE_CHANGE, stateChange)\n          resolve(media)\n        }\n      }\n\n      this.addEventListener(EventManagement.STATE_CHANGE, stateChange)\n    })\n  }\n\n  set url(value) {\n    this.poller.url = value\n  }\n\n  get url() {\n    return this.poller.url\n  }\n\n  get interval() {\n    return this.poller.interval / 1000\n  }\n\n  set interval(value) {\n    this.poller.interval = value * 1000\n  }\n\n  set state(value) {\n    if (this._state == value)\n      return\n\n    this._state = value\n    this.dispatchEvent(new akamai.amp.Event(EventManagement.STATE_CHANGE, value))\n\n    switch (this._state.id) {\n      case \"on\":\n        if (this.player.container.contains(this.poster)) {\n          this.player.container.removeChild(this.poster)\n        }\n        if (this.player.autoplay === true)\n          this.player.play()\n      break\n\n      default:\n        if (this._state.poster != null) {\n          this.poster.src = this._state.poster\n          this.player.container.appendChild(this.poster)\n        }\n        this.player.pause()\n        this.player.displayState = akamai.amp.DisplayState.NORMAL\n      break\n    }\n  }\n\n  get state() {\n    return this._state\n  }\n\n  onready() {\n    this.poller.start()\n  }\n}\n","import \"./EventManagement.less\"\nimport EventManagement from \"./EventManagement.js\"\n\nakamai.amp.AMP.registerPlugin(\"eventmanagement\", akamai.amp.Plugin.createFactory(EventManagement))\n\nexport {EventManagement}\n"]}