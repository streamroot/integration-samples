{"version":3,"sources":["../../../../src/MediaAnalytics.js","../../../../src/MediaAnalyticsFlash.js","../../../../src/main.js"],"names":["disableLocation","disableServerIPLookUp","dimensions","key","val","value","getStreamHeadPosition","currentTime","this","sdk","setData","player","evaluateBindings","onadbreakend","bind","addEventListener","onadloaded","onadbreakstart","onadstarted","onadended","onadbreakskipped","onaderror","onadfirstquartile","initialized","amaCallbacks","logger","media","src","setStreamURL","config","viewerID","viewerId","mediaanalytics","akamia","Utils","event","adObject","duration","adVO","title","id","handleAdLoaded","error","handleBufferEnd","bitrate","akamai","Plugin","MediaAnalyticsFlash","__proto__","Object","getPrototypeOf","call","xml","detail","element","metrics","vendor","createElement","appendChild","createProperty","plugin","swf","push","amp","FlashPlugin","registerPlugin"],"mappings":"uRAKaA,YAAAA,gDAGEC,yJAMPC,GAAAA,EAAaC,EACjB,OAAKC,MACOC,GAAVD,6HAUGE,GAALC,2EAQIC,KAAAC,IAAAC,QAAAP,EAAAK,KAAAG,OAAAC,iBAAAV,EAAAC,WAEKM,+NAQI,aAAAD,KAAAK,aAAAC,KAAAN,YACRG,OAAOI,iBAAiB,WAAAP,KAAgBQ,WAAKC,KAAAA,YAC7CN,OAAOI,iBAAiB,YAA7BP,KAA2CU,YAAKL,KAAaC,YACxDH,OAAOI,iBAAiB,UAA7BP,KAAyCW,UAAKH,KAAWF,YACpDH,OAAOI,iBAAiB,YAAaP,KAAKU,iBAAiBJ,KAAhEN,YACKG,OAAOI,iBAAiB,UAAWP,KAAKW,UAAUL,KAAKN,YACvDG,OAAOI,iBAAiB,kBAAkBK,KAAAA,kBAAsBN,KAArEN,YACKG,OAAOI,iBAAiB,aAAWP,KAAKa,aAAeP,KAA5DN,YACKG,OAAOI,iBAAiB,kBAAmBP,KAAKc,kBAAkBR,KAAKN,iIAMxEC,IAAKc,kBAAT,GAA+Bf,MAAAgB,aAAAhB,KAAAG,cACxBc,aAAW,8QAYdhB,IAAKE,qFAQLT,aAAa,8DAEZqB,IAAAA,aAAcG,EAAnBC,KAAA,SAESC,KAAAA,OAAaF,UAAtBlB,KAAAqB,OAAAC,UAAAtB,KAAAqB,OAAA,8BAEIE,IAAAA,YAAgBF,wDAKPH,OAAMM,IAAAA,MAAAA,SAAnBxB,KAAAqB,OAAA3B,WAAA2B,EAAA3B,YAEe+B,KAAAA,OAAWC,2KASXC,gIAKLT,yVAoBNU,WACSD,EAAAA,iBACPC,EAAWC,qBACJC,EAAKC,+BAGRD,IAAKE,wCAJb/B,IAAAgC,eAAAL,SAMKX,QACAhB,OAAIgC,MAAAA,8BAATC,wkCAgDEjB,OAAKd,IAAOJ,kKAOZkB,OAAKd,IAAOJ,sJAMV4B,uIAKUA,IAAAA,oBAAO3B,KAAAC,IAAAkC,mKAQTR,KAAOS,mCAjNmBC,EAAWC,SAAAA,qGCEzBtC,MAAAuC,EAAAC,WAAAC,OAAAC,eAAAH,IAAAI,KAAA3C,KAAAG,EAAAkB,yQAkBLrB,KAAAG,OAAAkB,OAAAH,OAAAlB,KAAAG,OAAAkB,OAAAH,MAAAM,kBAED,MAAd9B,iBAEFA,EAAAA,UAAoBC,GAAAD,EAAAC,0EAQlBiD,EAAMjB,EAAMkB,qBAAlB,WAAA,EAGc,OAAVC,mCAEAC,YAAiBA,uEAKfC,YAAaC,GAEnB,WAAQC,OAAAA,OAAR,4EAGOC,KAAAA,OAALC,OAAyBC,KAAA,6RAWf1B,EAAAA,eAAOjC,WAAA,GACbwB,kBACFA,GAAMM,KAAAA,GAANA,eAA8BA,aAC1B9B,WAAa4D,MAAnB3D,IAAAA,EAAAE,MAAAqB,EAAAM,eAAA9B,WAAAC,4EAtDM,YACF,0DACE,wEATqC0C,IAAOkB,IAAIC,eAAAA,iBAAAA,OAAAA,OAAAA,IAAAA,OAAAA,cAAAA,+FCI5DnB,EAAOkB,eAAQE","file":"akamai/amp/mediaanalytics/Mediaanalytics.min.js","sourcesContent":["export default class MediaAnalytics extends akamai.amp.Plugin {\n\n  constructor(player, config) {\n    super(player, config)\n    this.sdk = new JS_AkamaiMediaAnalytics(config.config)\n    this.sdk.disableLocation()\n\n    if (config.iplookup === false) {\n      this.sdk.disableServerIPLookUp()\n    }\n    this.initialized = false\n  }\n\n  setDimensions(value) {\n    let dimensions = this.config.dimensions\n    for (let key in value) {\n      let val = value[key]\n      if (val != null) {\n        dimensions[key] = val // TODO: Does this need to be evaluated for bindings?\n      }\n    }\n    this.applyDimensions(dimensions)\n    return value\n  }\n\n  amaCallbacks(playerInstance) {\n    this.getStreamHeadPosition = function() {\n      if (playerInstance) {\n        return playerInstance.currentTime\n      }\n    }\n  }\n\n  applyDimensions(dimensions) {\n    try {\n      for (let key in dimensions) {\n        this.sdk.setData(key, this.player.evaluateBindings(dimensions[key]))\n      }\n    }\n    catch (error) {\n      this.logger.error(\"[AMP MEDIA ANALYTICS ERROR]\", \"Could not set dimensions:\", error)\n    }\n  }\n\n  onready(event) {\n    this.player.addEventListener(\"adbreakstart\", this.onadbreakstart.bind(this))\n    this.player.addEventListener(\"adbreakend\", this.onadbreakend.bind(this))\n    this.player.addEventListener(\"adloaded\", this.onadloaded.bind(this))\n    this.player.addEventListener(\"adstarted\", this.onadstarted.bind(this))\n    this.player.addEventListener(\"adended\", this.onadended.bind(this))\n    this.player.addEventListener(\"adskipped\", this.onadbreakskipped.bind(this))\n    this.player.addEventListener(\"aderror\", this.onaderror.bind(this))\n    this.player.addEventListener(\"adfirstquartile\", this.onadfirstquartile.bind(this))\n    this.player.addEventListener(\"admidpoint\", this.onadmidpoint.bind(this))\n    this.player.addEventListener(\"adthirdquartile\", this.onadthirdquartile.bind(this))\n  }\n\n  onplayrequest(event) {\n    if (this.initialized == false) {\n      this.logger.log(\"[AMP MA EVENT] - handleSessionInit\")\n      this.sdk.handleSessionInit(new this.amaCallbacks(this.player))\n      this.initialized = true\n    }\n  }\n\n  onmediasequenceended(event) {\n    this.logger.log(\"[AMP MA EVENT] - handlePlayEnd\")\n    this.sdk.handlePlayEnd()\n  }\n\n  onplaying(event) {\n    if (this.player.ads != null && this.player.ads.inProgress)\n      return\n    this.logger.log(\"[AMP MA EVENT] - handlePlaying\")\n    this.sdk.handlePlaying()\n  }\n\n  onmediachange(event) {\n    let media = event.detail\n    let dimensions = null\n\n    this.initialized = false\n    this.logger.log(\"[AMP MA EVENT] - setStreamURL\", media.src)\n    this.sdk.setStreamURL(media.src, true)\n\n    let viewerId = this.config.viewerId || this.config.viewerID || this.config[\"std:viewerId\"]\n    if (viewerId != null) {\n      this.sdk.setViewerId(viewerId)\n    }\n\n    let config = media.mediaanalytics\n    if (config != null && config.dimensions != null) {\n      dimensions = akamia.amp.Utils.override(this.config.dimensions, config.dimensions)\n    } else {\n      dimensions = this.config.dimensions\n    }\n\n    //this.sdk.handleStreamSwitch()\n    this.applyDimensions(dimensions)\n  }\n\n  ondurationchange(event) {\n    this.logger.log(\"[AMP MA EVENT] - setStreamDuration\", event.detail)\n    this.sdk.setStreamDuration(event.detail)\n  }\n\n  updateMedia(media) {\n    this.logger.log(\"[AMP MA EVENT] - handleTitleSwitch\")\n    this.sdk.handleTitleSwitch(media)\n  }\n\n  onfragmentloadstart(event) {\n    if (typeof fragmentDownloadStarted === \"function\") {\n      fragmentDownloadStarted(event.detail)\n    }\n  }\n\n  onadbreakstart() {\n    this.player.mediaElement.dataset.isad = true\n  }\n\n  onadbreakend() {\n    this.player.mediaElement.dataset.isad = false\n  }\n\n  onadloaded(event) {\n    try {\n      let adVO = event.data\n      let adObject = {\n        adTitle: adVO.title,\n        adDuration: adVO.duration,\n        adPartnerId: adVO.partner,\n        adId: adVO.id\n      }\n      this.logger.log(\"[AMP MA EVENT] - handleAdLoaded\")\n      this.sdk.handleAdLoaded(adObject)\n    }\n    catch (error) {\n      this.logger.error(\"[AMP MEDIA ANALYTICS ERROR]\", error)\n    }\n  }\n\n  onadstarted() {\n    this.logger.log(\"[AMP MA EVENT] - handleAdStarted\")\n    this.sdk.handleAdStarted()\n  }\n\n  onadbreakskipped() {\n    this.logger.log(\"[AMP MA EVENT] - handleAdSkipped\")\n    this.sdk.handleAdSkipped()\n  }\n\n  onaderror(event) {\n    this.logger.log(\"[AMP MA EVENT] - handleAdError\")\n    this.sdk.handleAdError(event)\n  }\n\n  onadfirstquartile() {\n    this.logger.log(\"[AMP MA EVENT] - handleAdFirstQuartile\")\n    this.sdk.handleAdFirstQuartile()\n  }\n\n  onadmidpoint() {\n    this.logger.log(\"[AMP MA EVENT] - handleAdMidPoint\")\n    this.sdk.handleAdMidPoint()\n  }\n\n  onadthirdquartile() {\n    this.logger.log(\"[AMP MA EVENT] - handleAdThirdQuartile\")\n    this.sdk.handleAdThirdQuartile()\n  }\n\n  onadended() {\n    this.logger.log(\"[AMP MA EVENT] - handleAdComplete\")\n    this.sdk.handleAdComplete()\n  }\n\n  onpause() {\n    this.logger.log(\"[AMP MA EVENT] - handlePause\")\n    this.sdk.handlePause()\n  }\n\n  onseeking() {\n    if (this.player.currentTime > 0.1 || this.player.currentTime === 0) {\n      this.sdk.handleSeekStart()\n      this.logger.log(\"[AMP MA EVENT] - handleSeekStart\")\n    }\n  }\n\n  onseeked() {\n    if (this.player.currentTime > 0.1 || this.player.currentTime === 0) {\n      this.sdk.handleSeekEnd()\n      this.logger.log(\"[AMP MA EVENT] - handleSeekEnd\")\n    }\n  }\n\n  onerror(event) {\n    this.logger.log(\"[AMP MA EVENT] - handleError\", event.detail)\n    this.sdk.handleError(event.detail)\n  }\n\n  onbufferingchange(event) {\n    this.logger.log(\"[AMP MA EVENT] - handleBufferStart\", event.detail)\n    if (event.detail === true)\n      this.sdk.handleBufferStart()\n    else\n      this.sdk.handleBufferEnd()\n  }\n\n  onqualitychange(event) {\n    this.logger.log(\"[AMP MA EVENT] - handleBitRateSwitch\", event.data.bitrate)\n    this.sdk.handleBitRateSwitch(event.data.bitrate)\n  }\n\n}\n","export default class MediaAnalyticsFlash extends akamai.amp.FlashPlugin {\n\n  constructor(player, config) {\n    super(player, config)\n  }\n\n  get flashPlugins() {\n    return [{\n      id: \"OSMFCSMALoader\",\n      host: \"osmf\",\n      main: \"com.akamai.playeranalytics.osmf.OSMFCSMALoaderInfo\",\n      type: \"application/x-shockwave-flash\"\n    }]\n  }\n\n  setDimensions(value) {\n    this.player.mediaElement.setPlayerProperty(\"maDimensions\", value)\n    return value\n  }\n\n  createFlashVars(event) {\n    const flashvars = event.detail.flashvars\n    const dimensions =  this.player.config && this.player.config.media && this.player.config.media.mediaanalytics\n\n    if (dimensions != null) {\n      for (let key in dimensions) {\n        flashvars[\"report_\" + key] = dimensions[key]\n      }\n    }\n  }\n\n  createXML(event) {\n    const xml = event.detail.xml\n    const application = xml.firstChild\n    let metrics = xml.getElementsByTagName(\"metrics\")[0]\n    let element = null\n\n    if (metrics == null) {\n      metrics = xml.createElement(\"metrics\")\n      application.appendChild(metrics)\n    }\n\n    const vendor = xml.createElement(\"vendor\")\n    vendor.setAttribute(\"id\", \"akamai\")\n    metrics.appendChild(vendor)\n\n    if (this.config.config != null) {\n      this.createProperty(xml, \"MEDIA_ANALYTICS_BEACON\", this.config.config, vendor)\n\n      const path = this.config.plugin.swf || \"http://79423.analytics.edgesuite.net/csma/plugin/csma.swf\"\n      this.createProperty(xml, \"MEDIA_ANALYTICS_PLUGIN_PATH\", path, vendor)\n    }\n\n    if (this.config.dimensions != null) {\n      this.createProperty(xml, \"dimensions\", this.config.dimensions, vendor)\n    }\n  }\n\n  onmediachange(event) {\n    const media = event.detail\n    if (media.mediaanalytics && media.mediaanalytics.dimensions) {\n      media.dimensions = []\n      for (let key in media.mediaanalytics.dimensions) {\n        media.dimensions.push({key: key, value: media.mediaanalytics.dimensions[key]})\n      }\n    }\n  }\n}\n","import MediaAnalytics from \"./MediaAnalytics.js\"\nimport MediaAnalyticsFlash from \"./MediaAnalyticsFlash.js\"\n\nakamai.amp.AMP.registerPlugin(\"mediaanalytics\", \"html\", akamai.amp.Plugin.createFactory(MediaAnalytics))\nakamai.amp.AMP.registerPlugin(\"mediaanalytics\", \"flash\", akamai.amp.Plugin.createFactory(MediaAnalyticsFlash))\n\nexport {MediaAnalytics}\n"]}